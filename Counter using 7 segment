module decoder_seven_seg(
    input [3:0] din,
    input rst,
    output reg [6:0] segment_out
    );
  always @(din) begin
  if(rst)
  segment_out=7'b1111111;// all are off
  else begin
  case(din)
  4'b0000: segment_out = 7'b0000001;//display 0
  4'b0001: segment_out = 7'b1001111;//display 1
  4'b0010: segment_out = 7'b0010010;//display 2
  4'b0011: segment_out = 7'b0000110; //display 3
  4'b0100: segment_out = 7'b1001100; //display 4
  4'b0101: segment_out = 7'b0100100; //display5
  4'b0110: segment_out = 7'b0100000; //display 6
  4'b0111: segment_out = 7'b0001111; //display 7
  4'b1000: segment_out = 7'b0000000; //display 8
  4'b1001: segment_out = 7'b0000100; //display 9
  4'b1010: segment_out = 7'b0000010; //display a
  4'b1011: segment_out = 7'b1100000; //display b
  4'b1100: segment_out = 7'b0110001; //display c
  4'b1101: segment_out = 7'b1000010; //display d
  4'b1110: segment_out = 7'b0010000; //display e
  4'b1111: segment_out = 7'b0111000; //display a
  default: segment_out = 7'b1111111; //all are off
  endcase
  
  end
  end
endmodule





module display_7seg(rst, clk, segment, display_enable);
input rst, clk;
//input [3:0] dis0_inp, dis1_inp, dis2_inp, dis3_inp;
output  [6:0] segment;
output reg [7:0] display_enable;//enable or disable 8 display
reg divclk = 0;
reg auxclk=0;
reg [26:0] count=0;
reg [26:0] count1=0;
reg [3:0] tmp;
reg [1:0] state;
reg [15:0] data;
initial state = 2'b00;

//Instantiate the 7 segment decoder module
decoder_seven_seg UU0(.din(tmp), .rst(rst), .segment_out(segment));

//implement a clock divider 
always @(posedge clk) begin
if(rst) 
    count = 0;
else  if(count == 100000) begin
    divclk = ~divclk;
    count =0;
    end
  else
     count = count + 1;
    
end

always @(posedge clk) begin
if(rst) 
    count1 = 0;
else  if(count1 == 50000000) begin
    auxclk = ~auxclk;
    count1 =0;
    end
  else
     count1 = count1 + 1;
    
end
//control
always @(posedge divclk) begin
if(rst) 
display_enable = 8'b11111111;//all are off
else begin
case(state)
2'b00: begin
        tmp = data[3:0];
        display_enable = 8'b11111110;
        state=2'b01;
        end
2'b01:  begin
                tmp = data[7:4];
                display_enable = 8'b11111101;
                state=2'b10;
        end
2'b10: begin
                tmp = data[11:8];
                display_enable = 8'b11111011;
                state=2'b11;
                end
2'b11: begin
                        tmp = data[15:12];
                        display_enable = 8'b11110111;
                        state=2'b00;
                        end
endcase
end


end

always @(posedge auxclk) begin
if(rst) 
data = 0;
else data = data +1;
end

endmodule

